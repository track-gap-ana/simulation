""" 
    tl;dr: rescale muongun generators by tot_mu_generated / tot_mu_init then weight like normal!!
    
    LLP simulation uses muongun to generate single muons. We don't know in advance how many muons
    need to be generated before we reach our desired number of good LLP events.
    We therefore pass "infinite" nevents (tot_mu_init, 1e8 in our case) to initialize muongun in simulation.
    We then terminate the simulation once we reach desired number of events, 
    leaving us with some number tot_mu_generated which is how many muons we ACTUALLY generated.
    
    tot_mu_init is found in the generator object in the I3 files like "generator.total_events".
    tot_mu_generated is found in the summary.json files like "muongun:ncall" or in the llp_counter.json files as "total".

    The generators found in the simulation frame of the LLP simulation .i3 files contain muongun generator objects,
    but they don't "know" that we terminated early.

    As such we rescale the generators like generator = generator * tot_mu_generated / tot_mu_init, and then weight like normal.
"""

from icecube import icetray, dataio, MuonGun
import json

def harvest_rescaled_generators(infiles, tot_mu_generated_list):
    """
        Modified version of https://github.com/icecube/icetray/blob/main/MuonGun/resources/docs/weighting.rst 
        Harvest serialized generator configurations from a set of I3 files and rescale.
        
        Rescale each generator by tot_mu_generated / tot_mu_init 
        where tot_mu_generated is the total number of muons generated
        and tot_mu_init is the number passed to muongun initially (1e8).
        This is necessary since we suspend the simulation early once we
        reach the desired number of good LLPs, which is a stochastic process.
        
        Input: ordered list of infiles and # of generated muons per file
        returns: generator for the filelist
    """
    from icecube.icetray.i3logging import log_info as log
    generator = None
    for fname, tot_mu_generated in zip(infiles, tot_mu_generated_list):
        f = dataio.I3File(fname)
        fr = f.pop_frame(icetray.I3Frame.Stream('S'))
        f.close()
        if fr is not None:
            for k in fr.keys():
                v = fr[k]
                if isinstance(v, MuonGun.GenerationProbability):
                    tot_init = v.total_events
                    scale = tot_mu_generated / tot_init * 1.0
                    log('%s: found "%s" (%s)' % (fname, k, type(v).__name__), unit="MuonGun")
                    if generator is None:
                        generator = v*scale
                    else:
                        generator += v*scale
    return generator

def get_tot_mu_generated_list(json_files, key="total"):
    """ Get total number of generated muons from a list of json files."""
    tot_mu_generated_list = []
    for fname in json_files:
        with open(fname) as f:
            dic = json.load(f)
            tot_mu_generated_list.append(dic[key])
    return tot_mu_generated_list

def get_event_statistics(infiles, summaryfiles):
    """ 
        For testing purposes.
        
        Get event statistics from summary.json files. List of values for each file.
    
        tot_init: nevents passed to MuonGun. 1e8 for Axel's LLP sim. Same as tot_generated if normal muongun.
        tot_generated: nevents generated by MuonGun before stopping tray. Same as tot_kept if no selection in propagation.
        tot_kept: nevents kept after propagation (after good LLP selection etc.). How many events user asked for.
        tot_hit: nevents with at least one hit in the detector. Should be same as event # of last event.
        tot_saved: nevents saved to output file (after triggering etc.). Actual # of frames in output file.
    """
    stats = {
             "tot_init": [],
             "tot_generated": [],
             "tot_kept": [],
             "tot_hit": [],
             "tot_saved": [],
             }
    # tot init from generator object
    tot_init_list = get_tot_init(infiles)
    stats["tot_init"] = tot_init_list
    
    # tot generated, kept, hit from summary files
    for summaryfile in summaryfiles:
        with open(summaryfile) as f:
            summary = json.load(f)
            stats["tot_generated"].append(summary["muongun:ncall"])
            stats["tot_kept"].append(summary["LLPEventCounter_0000:ncall"])
            stats["tot_hit"].append(summary["KeptEvents"])
    
    # tot saved, need to open files to get this
    for infile in infiles:
        counter = 0
        f = dataio.I3File(infile)
        while f.more():
            frame = f.pop_daq()
            counter += 1
        stats["tot_saved"].append(counter)
        f.close()
    return stats

def get_tot_init(infiles):
    """
    Get tot_mu_init from each generator.
    """
    tot_init_list = []
    for fname in infiles:
        f = dataio.I3File(fname)
        fr = f.pop_frame(icetray.I3Frame.Stream('S'))
        f.close()
        if fr is not None:
            for k in fr.keys():
                v = fr[k]
                if isinstance(v, MuonGun.GenerationProbability):
                    tot_init_list.append(v.total_events)
    return tot_init_list